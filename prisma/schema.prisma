// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  reviews               Review[]
  ratings               Rating[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String

  entity Entity[]

  parentCategory   Category? @relation("CategoryParent", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String?

  childrenCategories Category[] @relation("CategoryParent")
}

model Entity {
  id String @id @default(cuid())

  title   String
  body    String  @db.Text
  ratings Rating[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Rating {
  id     String @id @default(cuid())
  rating Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  review Review[]

  entity   Entity @relation(fields: [entityId], references: [id])
  entityId String
}

model Review {
  id    String @id @default(cuid())
  title String
  body  String @db.Text

  user   User   @relation(fields: [userId], references: [id])
  userId String

  rating   Rating @relation(fields: [ratingId], references: [id])
  ratingId String
}
